program Arc;

var
    free : Boolean;
    count : Integer;

threadvar
    f : Boolean;
    c : Integer;

view
    Arc;
    CountWas(c: integer);

procedure Clone;
begin
  { Arc }
    <| Inc(count) |>
  { Arc[2] }
end;

procedure Print;
begin
  { Arc }
    <| f := free |>;
  { Arc * @(not f) }
    if f then <| error |>
  { Arc }
end;

procedure Drop;
begin
  { Arc }
    <| c := count; Dec(count) |>;
  { CountWas(c) }
    if c = 1 then
    begin
      { CountWas(1) } <| free := true |> { emp }
    end
  { emp }
end;


constraint Arc[n] entails n > 0 implies (free = false and n <= count);

constraint CountWas(c) entails c = 1 implies (free = false and count = 0);

constraint CountWas(m) * CountWas(n) entails (m <> 1) or (n <> 1);

begin
end.